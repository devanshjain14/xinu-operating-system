####################################################################
#                                                                   #
#                                                                   #
#  Makefile for the Xinu operating system                           #
#                                                                   #
#  includes: .deps and .defs                                        #
#                                                                   #
#                                                                   #
#####################################################################
include Makedefs

NODE=0
GPORT=556${NODE}

ifndef PLATFORM
$(error PLATFORM is not set. Edit your Makedefs file and add 'PLATFORM=arm-qemu'or 'PLATFORM=arm-bbb')
endif

ARCH = echo ${PLATFORM} | awk -F '-' '{print $1}'

ifeq ($(PLATFORM),arm-qemu)

	ARCH          = arm
	PLAT_CFLAGS   = -DARM_QEMU -DFS=1 -mcpu=arm1176jz-s -ggdb3 -O
	PLAT_LOADADDR = 0x00010000
	LDARCH        = armelf
	INCLUDE	      = -I$(TOPDIR)/include -I$(TOPDIR)/include/platform/$(ARCH) -I$(TOPDIR)/include/platform/$(PLATFORM)
	LGCC          = -L$(LIBGCC_LOC) -lgcc

else ifeq ($(PLATFORM),arm-bbb)

	ARCH          = arm
	PLAT_CFLAGS   = -DARM_BBB -DGPIO -mcpu=cortex-a8 -mno-unaligned-access -marm -O
	PLAT_LOADADDR = 0x81000000
	LDARCH        = armelf
	INCLUDE	      = -I$(TOPDIR)/include -I$(TOPDIR)/include/platform/$(ARCH) -I$(TOPDIR)/include/platform/$(PLATFORM)
	LGCC          = -L$(LIBGCC_LOC) -lgcc

else ifeq ($(PLATFORM),x86-qemu)

	ARCH        = x86
	BRELOC      = 0x150000
	BOOTPLOC    = 0x150000
	PLAT_CFLAGS = -DX86_QEMU -DBRELOC=${BRELOC} -DBOOTPLOC=${BOOTPLOC} -march=i586 -m32 -O0
	LDARCH      = elf_i386
	INCLUDE	    = -I$(TOPDIR)/include -I$(TOPDIR)/include/platform/$(ARCH) -I$(TOPDIR)/include/platform/$(PLATFORM)
	LGCC        =

else ifeq ($(PLATFORM),x86-galileo)

	ARCH        = x86
	PLAT_CFLAGS = -DX86_GALILEO -march=i586 -m32 -O
	LDARCH      = elf_i386
	INCLUDE	    = -I$(TOPDIR)/include -I$(TOPDIR)/include/platform/$(ARCH) -I$(TOPDIR)/include/platform/$(PLATFORM)
	LGCC =
endif

TOPDIR		=	..

CC		=	${COMPILER_ROOT}gcc
LD		=	${COMPILER_ROOT}ld
OBJCOPY		=	${COMPILER_ROOT}objcopy
XINU		=	$(TOPDIR)/compile/xinu
XINUBIN		=	$(TOPDIR)/compile/xinu.bin
XINUBOOT	=	$(TOPDIR)/compile/xinu.boot
XINUXBIN	=	$(TOPDIR)/compile/xinu.x86.boot
BUILDXBIN	=	$(TOPDIR)/compile/bin/buildxbin
BUILDMAKE	=	$(TOPDIR)/compile/bin/build-make
MKVERS		=	$(TOPDIR)/compile/bin/mkvers

MAKEDEP		=	$(CC) -M -MG

DEPSFILE	=	.deps
DEFSFILE	=	.defs
VERSIONFILE	=	version
LDSCRIPT	=	ld.script.${PLATFORM}
REBUILDFLAGS	=	-s $(TOPDIR)/system  debug.c 	\
			-s $(TOPDIR)/system/platform/$(PLATFORM)\
			-s $(TOPDIR)/system/platform/$(ARCH)    \
			-s $(TOPDIR)/lib			\
			-s $(TOPDIR)/shell  'xsh_rdstest*'      \
			-s $(TOPDIR)/apps			\

ifeq ($(PLATFORM),arm-qemu)
REBUILDFLAGS 	+=	-s $(TOPDIR)/device/$(PLATFORM)/tty		\
			-s $(TOPDIR)/device/$(ARCH)/nam			\
			-s $(TOPDIR)/device/$(ARCH)/ram			\
			-s $(TOPDIR)/device/$(ARCH)/lfs			\
			-s $(TOPDIR)/device/$(ARCH)/loopback

else ifeq ($(PLATFORM),arm-bbb)
REBUILDFLAGS    +=	-s $(TOPDIR)/device/$(PLATFORM)/tty		\
			-s $(TOPDIR)/device/$(ARCH)/nam			\
			-s $(TOPDIR)/device/$(PLATFORM)/eth		\
			-s $(TOPDIR)/device/$(ARCH)/rds			\
			-s $(TOPDIR)/device/$(ARCH)/ram			\
			-s $(TOPDIR)/device/$(ARCH)/lfs			\
			-s $(TOPDIR)/device/$(ARCH)/rfs			\
			-s $(TOPDIR)/net  'arp_dump*'		\
				'dhcp_dump*'  pxe.c

else ifeq ($(ARCH),x86)
REBUILDFLAGS    +=	-s $(TOPDIR)/device/$(PLATFORM)/tty	\
			-s $(TOPDIR)/device/$(PLATFORM)/eth	\
			-s $(TOPDIR)/device/$(PLATFORM)/lfs	\
			-s $(TOPDIR)/device/$(PLATFORM)/nam	\
			-s $(TOPDIR)/device/$(PLATFORM)/ram	\
			-s $(TOPDIR)/device/$(PLATFORM)/rds	\
			-s $(TOPDIR)/device/$(PLATFORM)/rfs	\
			-s $(TOPDIR)/net  'arp_dump*'		\
				'dhcp_dump*'  pxe.c
endif

DEFS		= 	-DBSDURG -DVERSION=\""`cat $(VERSIONFILE)`"\"

# Compiler flags
CFLAGS  =  ${PLAT_CFLAGS} -fno-builtin -fno-stack-protector -nostdlib -c -Wall ${DEFS} ${INCLUDE}
SFLAGS  = ${INCLUDE}

# Loader flags

LDFLAGS = -dn -m ${LDARCH} -Map xinu.map -T ld.script.${PLATFORM}

all:	xinu

#--------------------------------------------------------------------------------
# Handle generation of a new version string when initialize is recompiled
#--------------------------------------------------------------------------------

newversion:
	@echo creating new version
	@$(MKVERS) $(PLATFORM) > version

#--------------------------------------------------------------------------------
# Include generic make targets and rules from the file generated by build-make
#--------------------------------------------------------------------------------
-include $(DEFSFILE)

#--------------------------------------------------------------------------------
# Add files that require special rules and place start.o at the front
#--------------------------------------------------------------------------------
LD_LIST = binaries/start.o $(filter-out binaries/start.o,$(OBJ_FILES))

#------------------------------------------------------------
# Rules for files that need special handling
#------------------------------------------------------------

# Define variables for the Configuration file and generated files

CONFFILE	= $(TOPDIR)/config/Configuration.${PLATFORM}
CONFH		= $(TOPDIR)/include/conf.h
CONFC		= $(TOPDIR)/system/conf.c

# Define variables for the config program and its sources

CONFPGM		= $(TOPDIR)/config/config
CONFL		= $(TOPDIR)/config/config.l
CONFY		= $(TOPDIR)/config/config.y

# Set up the required build directory structure

BLDDIRS	= binaries
export

#--------------------------------------------------------------------------------
# Specific additional rules and exceptions
#--------------------------------------------------------------------------------

xinu:	Makefile rebuild $(BLDDIRS) $(DEFSFILE) $(DEPSFILE) $(CONFH) $(CONFC) $(LD_LIST) uboot-tool/mkimage
	@echo;echo 'Loading object files to produce xinu'
	@$(LD) $(LDFLAGS) $(LD_LIST) -o $(XINU) $(LGCC)
	@$(OBJCOPY) -O binary $(XINU) $(XINUBIN)
	@$(BUILDXBIN) $(XINUBIN) $(XINUXBIN)
ifneq (,$(filter $(PLATFORM),arm-bbb arm-qemu))
	@./uboot-tool/mkimage -A arm -O linux -T kernel -C none -a $(PLAT_LOADADDR) -e $(PLAT_LOADADDR) -d $(XINUBIN) $(XINUBOOT)
endif

uboot-tool/mkimage: uboot-tool/mkimage.c
	@echo making mkimage
	@(cd uboot-tool; make)

$(BLDDIRS):
	@mkdir -p $(BLDDIRS)

objects: $(LD_LIST)

$(CONFH): $(CONFFILE) $(CONFPGM)
	@echo making $(CONFH)
	@make configure

$(CONFC): $(CONFFILE) $(CONFPGM)
	@echo making $(CONFC)
	@make configure

$(CONFPGM): $(CONFL) $(CONFY)
	@echo making the config program
	@make -C $(TOPDIR)/config clean all install

config: configure

configure:
	@echo forcing a rebuild of conf.h and conf.c
	@make newversion
	@(cd $(TOPDIR)/config; make PLATFORM=$(PLATFORM) install)

clean:
	@echo removing .o files
	@rm -f binaries/*.o
	@echo   removing configuration files ...
	@rm -f $(CONFH) $(CONFC)
	@(cd $(TOPDIR)/config; make clean)
	@echo removing xinu ...
	@rm -f $(XINU)
	@rm -f $(XINUBIN)
	@rm -f $(XINUBOOT)
	@rm -f $(XINUXBIN)
	@rm -f .defs

install: xinu
	cp xinu.boot /tftpboot

etags:
	@(cd $(TOPDIR); find . -name '*.[chS]' -exec etags -a {} \;)

qemu: xinu
	export QEMU_AUDIO_DRV=wav; export QEMU_WAV_PATH=$(TOPDIR)/compile/.wav.wav; qemu-system-arm -M versatilepb -m 256M -nographic -cpu arm1176 -kernel xinu.boot

qemu-gdb: xinu
	export QEMU_AUDIO_DRV=wav; export QEMU_WAV_PATH=$(TOPDIR)/compile/.wav.wav; qemu-system-arm -M versatilepb -m 256M -nographic -cpu arm1176 -kernel xinu.boot -S -gdb tcp::${GPORT}
#--------------------------------------------------------------------------------
# Locations of source directories and exceptions (.c and .[sS] files to exclude)
#--------------------------------------------------------------------------------

$(DEFSFILE):
	@rm -f $(DEFSFILE)
	@echo "" > $(DEFSFILE)
	@make rebuild

$(DEPSFILE):
	@rm -f $(DEPSFILE)
	@echo "" > $(DEPSFILE)
	@make depend

rebuild: $(CONFC)
	@echo Rebuilding the $(DEFSFILE) file
	@$(BUILDMAKE) $(REBUILDFLAGS) > $(DEFSFILE)

defclean:
	rm -f $(DEFSFILE)
	echo "" > $(DEFSFILE)

depend: $(DEFSFILE)
	@echo;echo Making all dependencies in $(DEPSFILE)
	@$(MAKEDEP) ${INCLUDE} ${SRC_FULL} > $(DEPSFILE)
	@echo;echo Finished making dependencies

depclean:
	rm -f $(DEPSFILE)
	echo "" > $(DEPSFILE)

-include $(DEPSFILE)
